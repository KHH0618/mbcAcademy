1. 모듈: 파이썬 코드(함수, 변수 등)를 담고 있는 .py 파일로, 코드 재사용을 가능하게 함.  
   - 기본 제공 표준 모듈 예: math, time, os, random 등  
   - 모듈 불러오기 방법:  
     - import 모듈명: 모듈 전체를 불러옴.  
     - from 모듈명 import 함수명: 특정 함수나 변수만 가져옴.  
     - import 모듈명 as 별칭: 모듈 이름을 간략하게 별칭으로 사용.  

2. 사용자 정의 모듈: 사용자가 직접 작성한 .py 파일을 모듈로 활용 가능.  
   - 예: fibonacci.py 파일을 작성 후 import하여 사용.  
   - 특정 조건에서만 실행하려면 if __name__ == "__main__": 구조 사용.  

3. 패키지: 디렉토리를 이용한 모듈의 구조화. 점으로 구분된 이름(A.B)을 사용해 서브 모듈을 관리.  
   - 패키지 구성: __init__.py 파일이 포함된 디렉토리.  
   - 사용 방법:  
     - import 패키지명: 패키지를 전체적으로 불러옴.  
     - from 패키지명 import 모듈명: 특정 모듈만 가져옴.  
     - from 패키지명.모듈명 import 함수명: 특정 함수나 변수만 가져옴.  

4.**패키지 설치 및 관리:  
   - 패키지는 pip 또는 conda 명령어를 사용하여 설치 및 삭제 가능.  
   - 예:  
     - pip install 패키지명: 최신 버전 설치.  
     - pip install 패키지명==버전: 특정 버전 설치.  
     - pip uninstall 패키지명: 패키지 삭제.  
   - 설치된 패키지는 일반적으로 site-packages 폴더에 저장.  

5. 표준 라이브러리: 파이썬에서 제공하는 기본 라이브러리 집합으로 다양한 문제를 해결할 수 있음.  
   - 예: math, datetime, os, random, threading 등 200여 가지 모듈 포함.  
   - 공식 문서: Python Library Reference(https://docs.python.org/3/library/index.html).  

6. 패키지 활용 팁:  
   - 상대 경로로 가져오기: from .모듈 import 함수 형식 사용.  
   - 패키지 리로드: importlib.reload를 사용해 변경 사항 반영.  
   - __init__.py 파일의 __all__ 속성을 정의해 import *로 불러올 모듈을 제한 가능.  

문서의 마지막에는 연습문제가 포함되어 있으며 학습한 내용을 확인하고 실습할 수 있음.
