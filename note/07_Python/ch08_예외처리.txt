1. 예외 처리 개념:  
   - 예외(Exception)는 실행 중 발생하는 오류를 의미한다.  
   - 예외 처리(Exception Handling)는 오류 발생 가능성을 예측하고 미리 처리하는 프로그래밍 방식이다.  
   - 예외 처리가 필요한 상황에는 파일 접근 오류, 데이터베이스 제약 조건 위반, 네트워크 연결 실패, 인덱스 초과 등이 있다.  

2. try~except 구문:  
   - try 블록은 예외가 발생할 가능성이 있는 코드를 작성하는 영역이다.  
   - except 블록은 예외 발생 시 실행할 코드를 작성한다.  
   - 여러 예외를 각각 처리하거나, 하나의 except 블록에서 여러 예외를 처리할 수 있다.  
   - else 블록은 예외가 발생하지 않을 경우 실행할 코드를 작성한다.  

3. 예외 발생시키기 (raise):  
   - raise는 특정 상황에서 강제로 예외를 발생시키는 구문이다.  
   - 예외를 호출자에게 전달하거나, 추상 클래스를 정의하는 데 활용된다.  

4. 추상 클래스와 추상 메서드:  
   - 추상 클래스는 객체를 생성할 수 없으며, 상속을 통해서만 사용할 수 있다.  
   - 추상 메서드는 구현부가 없고 선언만 존재하며, 자식 클래스에서 재정의해야 한다.  

5. 사용자 정의 예외:  
   - Exception 클래스 또는 하위 클래스를 상속받아 새로운 예외 클래스를 정의할 수 있다.  
   - 프로그램에 특화된 오류를 처리하기 위해 사용자 정의 예외를 활용한다.  

6. 정리 작업:  
   - 자원을 정리하여 프로그램의 안정성을 향상시킨다.  
   - finally 블록은 예외 발생 여부와 관계없이 항상 실행된다.  
   - with 구문은 자원을 자동으로 정리하는 구조를 제공한다.  
