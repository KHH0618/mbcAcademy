1. 데이터 플로우 그래프:  
   - TensorFlow는 방향성 있는 데이터 플로우 그래프를 기반으로 동작하며, 노드와 엣지로 구성됨.  
   - 노드는 수학적 연산과 데이터 입출력을 담당하고, 엣지는 텐서(Tensor)를 노드 간에 전달함.  

2. 텐서(Tensor:  
   - 텐서는 다차원 배열로, 동적 크기를 지원하며 모델의 입력 및 출력을 구성함.  
   - TensorFlow의 연산은 텐서를 기반으로 수행됨.  

3. 선형 모델 수식:  
   - \( H(x) = Wx + b \): 선형 회귀 모델에서 입력 \( x \)에 가중치 \( W \)와 편향 \( b \)를 적용해 출력 \( H(x) \)를 계산함.  
   - 다중 입력의 경우 \( H(x_1, x_2, ..., x_n) = w_1x_1 + w_2x_2 + ... + w_nx_n + b \) 형태로 확장됨.  

4. 경사 하강법:  
   - 비용 함수(cost)를 최소화하기 위해 경사 하강법을 사용함.  
   - 학습 과정에서 가중치와 편향을 반복적으로 업데이트해 모델을 최적화함.  

5. 행렬 연산:  
   - 다차원 입력 데이터를 효율적으로 처리하기 위해 행렬 연산을 활용함.  
   - 예를 들어, 입력 \( X \)와 가중치 \( W \)를 행렬 곱셈으로 계산하고 편향 \( b \)를 더해 결과를 생성함.  

6. 학습 데이터 구조:  
   - 입력 데이터와 출력 데이터를 행렬 형식으로 정리하여 모델 학습에 사용함.  
   - 예제: 퀴즈 점수(x1, x2, x3)와 시험 점수(y)를 기반으로 학습함.  

7. 다중 클래스 분류:  
   - 여러 클래스에 대한 가중치를 적용해 출력값을 계산하며, 소프트맥스 활성화 함수 등을 사용해 확률 분포를 생성함.  

8. 활용:  
   - TensorFlow v1에서의 텐서는 선형 모델, 다중 클래스 분류, 회귀 등 다양한 기계 학습 문제에 사용되며, 텐서 연산을 통해 모델을 효율적으로 구현함.  