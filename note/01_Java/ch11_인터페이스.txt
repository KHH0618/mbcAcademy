1. 인터페이스란 작업명세서의 역할과 객체의 다형성 구현, 메소드를 부품화 하여 보다 쉽게 유지보수를 할 수 있도록 해준다.
2. 인터페이스는 class 대신 interface를 사용하여 선언한다.
3. 인터페이스는 추상메소드와 상수로 구현되어 있다.
4. 인터페이스를 상속받게되면 하위 클래스에선 오버라이드를 무조건 사용하여 인터페이스의 추상 메소드를 구현해야 한다.
5. 인터페이스를 만들때 상수 및 추상 메소드는 private의 접근제한자는 사용이 불가하다.(오버라이드를 사용해야하기 때문에...)
6. 인터페이스를 사용하면 협업과정에서의 가이드라인 역할을 하며 일관적이고 정형화된 프로그램개발을 가능하게 하고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하도록 하여, 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.
7. 인터페이스를 사용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제 구현에 독립적인 프로그램을 작성하는 것이 가능하다.
8. 인터페이스와 추상클래스의 공통점은 추상메소드를 가지고있고 변수 선언이 객체생성이 아닌 변수의 타입을 정의하는것에 목적을 가지고 있다. 그리고 객체생성이 불가하다.