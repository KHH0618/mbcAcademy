1. 패턴이란 상속 인터페이스 추상화등의 기능을 이용하여 객체지향 언어의 장점들을 모아 가장 효율적으로 개발을 할 수있게 만들어 놓은 프레임 이다.
2. 싱글톤 패턴 (Singleton pattern)이란 어떤 클래스의 객체는 오직 하나인 유일한 객체를 만들어 여러가지 상황에서 동일한 객체에 접근하기 위해 만들어진 패턴이다.
3. 스트레티지 패턴 (Strategy Pattern) 이란 기능 하나를 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만들어주는 패턴이다.
4. 싱글톤 패턴은 오로지 하나의 객체만 만들 수 있으며 생성자를 private를 이용해서 외부에서 호출하지 못하게 만든다.
ex) public class SingletonClass{
	private static SingletonClass;
}
5. 위와같이 생성하면 getInstance를 이용하여 오직 해당클래스에서만 호출하게되며 단 하나의 객체만 생성되게 된다.
6. 스트레티지 패턴 (Strategy Pattern)은 각각의 기능을 부품화 하여 유지보수를 용이하게 만드는 장점이 있다.
7. 스트레티지 패턴 (Strategy Pattern)을 사용하려면 클래스의 공통점을 상위 클래스로 올리고 상위클래스는 추상클래스로 생성, 각각의 기능을 인터페이스화 하여 하위 객체에서 직접 구현하도록 만든다.