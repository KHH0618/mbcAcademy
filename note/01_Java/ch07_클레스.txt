1. 클래스란 메소드의 집합체이다.
2. 클래스는 객체를 생성하기위한 설계도이며 객체는 클래스로부터 메모리에 생성된다. ex) Car mycar = new Car();
3. 객체 데이터 변수는 값이 아닌 참조값을 저장합니다.
4. 클래스를 생성하기 위해선 접근제한자 static class 클레스명 {생성자, 자료형 인스턴스 변수, 메소드} 으로 선언하여 생성한다.
5. 생성자는 매개변수 있는 생성자와 매개변수가 없는 생성자로 나뉜다.
6. 매개변수가 없는 생성자는 따로 만들지 않아도 컴파일 단계에서 자동으로 만들어준다.
7. 매개변수가 있는 생성자는 매개변수의 데이터 타입, 갯수등을 구분하여 서로 다른 매개변수를 가진 생성자를 복수생성 가능하다.
ex) public class Car(){
	public Car(){
		}
	public Car(매개변수 1){
		}
	public Car(매개변수 1, 매개변수 2){
		}
	}
8. 객체지향 프로그래밍은 캡슐화와 데이터은닉, 다형성, 상속이 특징이다.
9. 캡슐화와 데이터 은닉 : 캡슐화는 연관된 기능의 메소드를 모아둔고 데이터은닉은 다른사람이 이 클래스에 데이터를 함부로 조작하지 못하도록 하는 접근제한자이다.
ex)  public class Man(){
	private String name;
	private int age
	public Man(){
		}
	public Man(매개변수 1){
		}
	public Man(매개변수 1, 매개변수 2){
		}
	}
10. 다형성 : 같은 모습이지만 다른 기능을 한다.(오버라이드), 배열에 저장할 수 있다.
ex) Man mans[] = {new Man(), new Man()};

11. 상속 : 다른클래스로 부터 상속받아 사용이 가능하다. 많이 사용하거나 중요한 메소드의 집합같은경우 상속을 받아 사용하며 필요한경우 오버라이드를 통하여 메소드를 수정하여 사용하기도한다.
ex) public Tom extends Man(){}

12. setter & getter : 셋터와 겟터는 데이터가 은닉되어있을경우 데이터에 접근하기위해 사용한다.
ex) public void setName(String name){
	this.name = name;
	}
     public void getName(){
	return name;
	}